Objects doesn't need access to a Runtime - that will be supplied in the call!


class seph.lang.Runtime
iface seph.lang.ast.Message
class seph.lang.ast.NamedMessage
class seph.lang.ast.LiteralMessage

iface seph.lang.SephObject
class seph.lang.Symbol
class seph.lang.Module

class seph.lang.parser.Parser
class seph.lang.parser.MessageShuffler



Everything uses SephObject
  Possibly create a BaseSephObject class that implements some helpers.

  Getting cells should generate one of the following styles of code. These classes can be created using code generation of different arities. Probably do from zero to four parents, and 0 to 30 cells. Add fallback options on top of that,
  and a factory to choose which one to use.
 
   (See SephObjectGen32.java for example)


How to handle builtins:

  Text:
    Text.new("foo", :parent => runtime.textBase);

  textBase:
    only instance of TextBase, which is automatically generated from the annotations in Text for methods


  Text.get and ilk is hardcoded to point to TextBase.get and ilk

  The name Text will be bound to textBase on the outside


class Selector {
  public final String name;
  public final int id;
  public Selector(String name, int id) {
    this.name = name;
    this.id = id;
  }
}



Things to add for initial version:
 - LinkedList implementation (Cons, Empty)
 - PersistentMap
 - Numbers
