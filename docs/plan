Plan to get somewhere working:
------------------------------

- Create a new site
- Create two examples - one based on people, and one on Guy Steeles tail recursion example
     (use local blocks for the people example)

- Implement a simplistic interpreter for simple mimicking
- Implement a simple, functional operator shuffling
- Implement a simplistic interpreter for defining and running methods.
- Generate simple bytecode for the above
- Integrate KILIM into simple bytecode
- Integrate tail recursion into the above








- Unify methods and fns? Code will have both an object scope and a lexical scope. Lookup will use lexical scope first and only fall back on object after that. Force object by doing @.
    Setting things will be easy - since we know they will happen at the lexical level. No need to lookup things in the object scope.

  Change name in that case At this point it makes sense to have syntax.

    plus: #(x, y, x+y)   (returns DefaultMethod)
    
Make # a keyword - something the compiler recognizes and that will introduce a compilation boundary. Possibly allow a lambda too.










To implement for fact:
 - Top level notation
 - local assignment
 - methods:
  - method
  - simple arguments
  - local assignment in method
  - ==
  - *
  - -
  - println
