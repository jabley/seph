
foo: 42,
bar: 56 

x = 42
y = 42+55,
z: y



There is one toplevel lexical scope (where variables can be mutated) for each file. If a keyword argument is used, those things will be exporteda as a module. Things in the non-keyword arguments will be evualated and those
values will be available. A file containing this:

  foo: 42,
  10 * 5,
  4 * 3,
  12 * 3,
  bar: 55
  
is the same as:

  value1 = 10 * 5
  value2 = 4 * 3
  value3 = 12 * 3

  Module with(
    foo: 42,
    bar: 55,
    values: [value1, value2, value3]
  )

The positional arguments will be evaluated before the module creation, and then added to the module.

There is no global scope. You can get access to another file in one way (inspired by Newspeak):

  fastercsv: from("lib/seph/faster_csv"),

the fastercsv cell will contain a Module instance with the values specified. 





ensure recursive dependencies can be specified

------------------------------------

The above is dated. The new format allows interleaving of lexical scopes and top level definitions, plus lexical scopes using them:

  a = 42,

  foo: #(y, a + 15*y),

  b = foo(10),

  bar: b,
  fux: foo(b)

is the same as:

  Module definition(m,
    a = 42 + dependencies[:param1]
    definition(
      with(foo: #(y, a + 15*y)) definition(
        b = foo(10)
        definition(
          with(bar: b) definition(
            with(fux: foo(b))))))) collapseToParent(Module)

  blarg: from("something", param1: 10)

"definition" establishes a new lexical scope with a parent scope outside. It executes with the receiving module as self, and returns the last value. This should be a module. If the last returned value is not a module, return self.
definition also takes any keyword arguments as dependencies to that module, so a module can be created with a specific dependency.
